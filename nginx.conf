events {
    worker_connections 1024; # Maximum number of simultaneous connections
}

http {
    include /etc/nginx/mime.types; # Include mime types
    default_type application/octet-stream; # Default file type

    # Frontend upstream pool
    upstream frontend_pool {
        least_conn;
        server frontend:80;
    }

    # Backend upstream pool
    upstream backend_pool {
        least_conn;
        server backend:5005;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name localhost www.localhost;

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name localhost www.localhost;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/server.cert;
        ssl_certificate_key /etc/ssl/private/server.key;

        # Proxy frontend requests
        location / {
            proxy_pass http://frontend_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Proxy requests to the backend API
        location /api/ {
            proxy_pass http://backend_pool;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Proxy WebSocket connections to the backend
        location /ws/ {
            proxy_pass http://backend_pool;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Handle 404 errors for SPA routing
        error_page 404 /index.html;
    }
}